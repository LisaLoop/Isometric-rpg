(()=>{"use strict";var e,t=function(e,t,n){var r=n.x,o=n.y;return{x:(e.x-e.y)*r/2+t.x,y:(e.x+e.y)*o/2+t.y}};!function(e){e[e.Up=1]="Up",e[e.Down=2]="Down",e[e.Left=3]="Left",e[e.Right=4]="Right"}(e||(e={}));var n=function(t,n,r){switch(r){case e.Up:return{x:t-1,y:n-1};case e.Down:return{x:t+1,y:n+1};case e.Left:return{x:t-1,y:n+1};case e.Right:return{x:t+1,y:n-1};default:throw new Error("Not a valid direction")}},r=function(e){return e>=0&&e<80?0:e>=80&&e<100?1:e>=100&&e<200?2:e>=200&&e<256?3:4},o={x:32,y:32},a=function(e){o.x=i(5,58,e.x),o.y=i(5,58,e.y)};window.addEventListener("keydown",(function(t){if(!t.defaultPrevented){var r;switch(t.code){case"KeyS":case"ArrowDown":r=n(o.x,o.y,e.Down),a(r);break;case"KeyW":case"ArrowUp":r=n(o.x,o.y,e.Up),a(r);break;case"KeyA":case"ArrowLeft":r=n(o.x,o.y,e.Left),a(r);break;case"KeyD":case"ArrowRight":r=n(o.x,o.y,e.Right),a(r)}y(),t.preventDefault()}}),!0);var c=function(e){console.log("e.x: ",e.clientX,"e.y: ",e.clientY),console.log("e: ",e);var n=t({x:0,y:0},{x:0,y:0},{x:1,y:1}),r=t({x:0,y:1},{x:0,y:0},{x:1,y:1}),o=t({x:1,y:1},{x:0,y:0},{x:1,y:1}),a=t({x:1,y:0},{x:0,y:0},{x:1,y:1});console.log(n,r,o,a)},y=function(){var e=document.getElementById("grass"),t=document.getElementById("water"),n=document.getElementById("sand"),a=document.getElementById("snow"),c=[t,n,e,a,a],y=function(e,t){for(var n=[],o=0;o<64;o++){for(var a=[],c=0;c<64;c++){var y=noise.simplex2(o/100,c/100);y=256*Math.abs(y),a.push(r(y))}n.push(a)}return n}(),s=o.x,d=o.y,u=i(0,y.length-1,s-5),x=i(0,y.length-1,s+5),l=i(0,y[0].length-1,d-5),f=i(0,y[0].length-1,d+5),g=document.getElementById("canvas"),v=g.getContext("2d");v.clearRect(0,0,g.width,g.height);for(var w=0,h=u;h<=x;h++){for(var m=0,E=l;E<=f;E++){var p=c[y[h][E]],L=50*w,D=50*m,I=L-D,B=(L+D)/2;v.drawImage(p,I+800,B+0),m++}w++}},i=function(e,t,n){return n<e?e:n>t?t:n};window.addEventListener("load",(function(){!function(){document.getElementById("canvas").addEventListener("click",c);var e=Math.random();noise.seed(e),y()}()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,